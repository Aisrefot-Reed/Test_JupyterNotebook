import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
from datetime import datetime
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Data Analysis App", layout="wide")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
def generate_test_data(rows=100):
    dates = pd.date_range(start='2024-01-01', periods=rows, freq='D')
    categories = ['A', 'B', 'C', 'D']
    
    data = {
        'Date': dates,
        'Category': [random.choice(categories) for _ in range(rows)],
        'Value': np.random.normal(100, 15, rows),
        'Quantity': np.random.randint(1, 100, rows),
        'Customer_ID': np.random.randint(1000, 9999, rows)
    }
    
    return pd.DataFrame(data)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö
def analyze_data(df):
    results = {
        'total_sales': df['Value'].sum(),
        'avg_value': df['Value'].mean(),
        'total_quantity': df['Quantity'].sum(),
        'unique_customers': df['Customer_ID'].nunique(),
        'category_distribution': df['Category'].value_counts()
    }
    return results

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.title("üìä –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    st.sidebar.header("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    rows = st.sidebar.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö", 50, 500, 100)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if st.sidebar.button("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"):
        st.session_state.df = generate_test_data(rows)
    
    if 'df' not in st.session_state:
        st.session_state.df = generate_test_data(rows)
    
    df = st.session_state.df
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.subheader("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö")
        st.dataframe(df)
    
    with col2:
        st.subheader("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
        metrics = analyze_data(df)
        
        st.metric("–û–±—â–∏–µ –ø—Ä–æ–¥–∞–∂–∏", f"${metrics['total_sales']:,.2f}")
        st.metric("–°—Ä–µ–¥–Ω—è—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"${metrics['avg_value']:,.2f}")
        st.metric("–í—Å–µ–≥–æ –µ–¥–∏–Ω–∏—Ü", f"{metrics['total_quantity']:,}")
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", metrics['unique_customers'])
    
    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
    st.subheader("üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    chart_type = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞",
        ["–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è"]
    )
    
    col3, col4 = st.columns(2)
    
    with col3:
        if chart_type == "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
            daily_sales = df.groupby('Date')['Value'].sum().reset_index()
            fig = px.line(daily_sales, x='Date', y='Value', title='–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂')
            st.plotly_chart(fig)
            
        elif chart_type == "–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞":
            fig = px.histogram(df, x='Value', nbins=30, title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏')
            st.plotly_chart(fig)
            
    with col4:
        if chart_type == "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
            category_sales = df.groupby('Category')['Value'].sum()
            fig = px.pie(values=category_sales.values, names=category_sales.index, title='–ü—Ä–æ–¥–∞–∂–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
            st.plotly_chart(fig)
            
        elif chart_type == "–î–∏–∞–≥—Ä–∞–º–º–∞ —Ä–∞—Å—Å–µ—è–Ω–∏—è":
            fig = px.scatter(df, x='Value', y='Quantity', color='Category', title='–°—Ç–æ–∏–º–æ—Å—Ç—å vs –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
            st.plotly_chart(fig)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    if st.button("–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ CSV"):
        csv = df.to_csv(index=False)
        st.download_button(
            label="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ",
            data=csv,
            file_name=f"data_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
            mime="text/csv"
        )

if __name__ == "__main__":
    main()